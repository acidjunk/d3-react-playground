{"version":3,"sources":["contexts/ReactDims.jsx","d3Land/utils/Axes.js","d3Land/utils/Dimensions.js","d3Land/utils/Scales.js","d3Land/Circles.js","d3Land/ChartInterface.js","components/ReactNode.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ReactDims","React","createContext","Provider","props","domNode","useRef","useState","dimensions","setDimensions","timeoutID","newTimeoutID","useEffect","current","getBoundingClientRect","window","addEventListener","getNodeDimensions","removeEventListener","clearTimeout","setTimeout","debounce","ref","style","height","value","children","defaultProps","ChildComponent","Axes","parent","scales","dims","createAxes","scaleAxes","xAxisBottomG","append","attr","innerHeight","call","xAxisBottom","yAxisLeftG","yAxisLeft","axisBottom","scale","xScale","tickSize","axisLeft","yScale","innerWidth","updateAxes","this","Dimensions","setMargin","margin","top","left","bottom","right","setDims","width","setInnerDims","Scales","data","setScales","scaleLinear","domain","range","Circles","chart","updateData","newData","allCircles","selectAll","transition","duration","d","i","enter","exit","remove","updateScales","newScales","ChartInterface","domNodeCurrent","init","svg","axes","circles","updateDims","select","styles","display","withContext","canvas","createCanvas","vizInitialized","setVizInitialized","length","Consumer","incomingDims","App","setData","generateData","arr","push","Math","round","random","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.281da4ec.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst ReactDims = React.createContext(null);\n\nexport const Provider = (props) => {\n  const domNode = useRef(null);\n  const [dimensions, setDimensions] = useState({});\n  const [timeoutID, newTimeoutID] = useState(null);\n\n  useEffect(() => {\n    setDimensions(domNode.current.getBoundingClientRect());\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", getNodeDimensions);\n    return () => {\n      window.removeEventListener(\"resize\", getNodeDimensions);\n    };\n  }, []);\n\n  const getNodeDimensions = () => {\n    clearTimeout(timeoutID);\n    newTimeoutID(\n      setTimeout(() => {\n        setDimensions(domNode.current.getBoundingClientRect());\n      }, props.debounce)\n    );\n  };\n\n  return (\n    <div ref={domNode} style={{ height: \"100%\" }}>\n      <ReactDims.Provider value={dimensions}>\n        {props.children}\n      </ReactDims.Provider>\n    </div>\n  );\n};\n\nProvider.propTypes = {\n  debounce: PropTypes.number,\n};\n\nProvider.defaultProps = {\n  debounce: 100,\n};\n\nexport const withContext = (ChildComponent) => {\n  return (props) => (\n    <ReactDims.Consumer>\n      {(incomingDims) => <ChildComponent {...props} dims={incomingDims} />}\n    </ReactDims.Consumer>\n  );\n};\n","import { axisBottom, axisLeft } from 'd3-axis';\nclass Axes {\n    constructor(parent, scales, dims){\n        this.createAxes(parent, scales, dims);\n    };\n    createAxes=(parent, scales, dims)=>{\n        this.scaleAxes(scales, dims);\n        this.xAxisBottomG =\n            parent.append('g')\n                .attr('transform', `translate(0, ${dims.innerHeight})`)\n                .call(this.xAxisBottom)\n        this.yAxisLeftG =\n            parent.append('g')\n                .call(this.yAxisLeft)\n    };\n    scaleAxes=(scales, dims)=>{\n        this.xAxisBottom =\n            axisBottom()\n                .scale(scales.xScale)\n                .tickSize(-dims.innerHeight)\n        this.yAxisLeft =\n            axisLeft()\n                .scale(scales.yScale)\n                .tickSize(-dims.innerWidth)\n    };\n    updateAxes=(scales, dims)=>{\n        this.scaleAxes(scales, dims);\n        this.xAxisBottomG\n            .attr('transform', `translate(0, ${dims.innerHeight})`)\n            .call(this.xAxisBottom)\n        this.yAxisLeftG\n            .call(this.yAxisLeft)\n    };\n};\nexport default Axes;\n","class Dimensions {\n    constructor(dims){\n        this.setMargin();\n        this.setDims(dims);\n        this.setInnerDims();\n    };\n    setMargin=()=>{\n        this.margin = { top: 20, left: 30, bottom: 20, right: 30 };\n    };\n    setDims=(dims)=>{\n        const { width, height } = dims;\n        this.width = width;\n        this.height = height;\n        this.setInnerDims();\n    };\n    setInnerDims=()=>{\n        this.innerHeight = this.height-(this.margin.top+this.margin.bottom);\n        this.innerWidth = this.width-(this.margin.left+this.margin.right);\n    };\n};\nexport default Dimensions;\n","/*\nIt takes two arguments; ‘data’ & ‘dims.’ You can imagine perhaps using the ‘data’ parameter for setting up your scales’\ndomains, but we won’t bother in this example. Also perhaps you could add a range parameter, there are lot’s of\npossibilities, but for now let’s keep it simple.\n */\nimport { scaleLinear } from 'd3-scale';\nimport { min, max, extent } from 'd3-array';\nclass Scales {\n    constructor(data, dims){\n        this.setScales(data, dims);\n    };\n    setScales=(data, dims)=>{\n        this.xScale =\n            scaleLinear()\n                .domain([0, 9])\n                .range([0, dims.innerWidth])\n        this.yScale =\n            scaleLinear()\n                .domain([0, 10])\n                .range([dims.innerHeight, 0])\n    };\n};\nexport default Scales;\n","import { selectAll } from 'd3-selection';\nimport transition from 'd3-transition';\n\nclass Circles {\n    constructor(chart, data, scales){\n        this.chart = chart;\n        this.scales = scales;\n        this.updateData(data);\n    };\n\n    updateData=(newData)=>{\n        this.data = newData;\n        this.allCircles = this.chart.selectAll('.myCircle').data(this.data);\n        this.allCircles.transition().duration(500)\n            .attr('cx', (d,i)=>this.scales.xScale(i))\n            .attr('cy', (d)=>this.scales.yScale(d))\n            .attr('fill', 'orange')\n        this.enter();\n    };\n\n    enter=()=>{\n        this.allCircles.enter()\n            .append('circle')\n            .attr('class', 'myCircle')\n            .attr('cx', (d,i)=>this.scales.xScale(i))\n            .attr('cy', (d)=>this.scales.yScale(d))\n            .attr('r', 10)\n            .attr('fill', 'green')\n        this.exit();\n    };\n\n    exit=()=>{\n        this.allCircles.exit().remove();\n    };\n\n    updateScales=(newScales)=>{\n        this.scales = newScales;\n        this.allCircles =\n            this.chart.selectAll('.myCircle')\n                .transition().duration(500)\n                .attr('cx', (d,i)=>this.scales.xScale(i))\n                .attr('cy', (d)=>this.scales.yScale(d))\n    };\n};\n\nexport default Circles;\n","import { select} from 'd3-selection';\nimport { Dimensions, Scales, Axes } from './utils';\nimport Circles from './Circles';\nclass ChartInterface {\n  constructor(domNodeCurrent){\n    this.svg = select(domNodeCurrent).append('svg');\n    this.svg.attr('width', '100%').attr('height', '100%');\n  };\n  init=(data, dims)=>{\n    this.data = data;\n    this.dims = new Dimensions(dims);\n    this.chart = this.svg.append('g');\n    this.chart.attr('transform', `translate(${this.dims.margin.left}, ${this.dims.margin.top})`);\n    this.scales = new Scales(this.data, this.dims);//\n    this.axes = new Axes(this.chart, this.scales, this.dims);\n    this.circles = new Circles(this.chart, this.data, this.scales);\n    // this.updateData(data);//<--- commented out; now redundant!!\n  };\n  updateData=(data)=>{\n    this.circles.updateData(data)\n  };\n  updateDims=(dims)=>{\n    this.dims.setDims(dims);\n    this.scales.setScales(this.data, this.dims);\n    this.axes.updateAxes(this.scales, this.dims);\n    this.circles.updateScales(this.scales);\n  };\n};\nexport default ChartInterface;\n","import React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { withContext } from \"../contexts/ReactDims\";\nimport ChartInterface from \"../d3Land/ChartInterface\";\n\nconst styles = {\n  display: \"grid\",\n  height: \"100%\",\n  // backgroundColor: \"#000\",\n};\n\nconst ReactNode = ({ dims, data }) => {\n  const domNode = useRef(null);\n  const [canvas, createCanvas] = useState(null);\n  const [vizInitialized, setVizInitialized] = useState(false);\n\n  useEffect(() => {\n    createCanvas(() => new ChartInterface(domNode.current));\n  }, []);\n\n  useEffect(() => {\n    vizInitialized && canvas.updateDims(dims);\n  }, [dims]);\n\n  useEffect(()=>{\n    vizInitialized && canvas.updateData(data);\n  }, [data]);\n\n  useEffect(() => {\n    if (data.length > 1 && dims.width && vizInitialized === false) {\n      canvas.init(data, dims);\n      setVizInitialized(() => true);\n    }\n  }, [data, dims]);\n\n  return <div ref={domNode} style={styles} />;\n  // return (<div style={styles} ref={domNode}>\n  //   {dims.width} x {dims.height}\n  // </div>);\n};\nexport default withContext(ReactNode);\n","import \"./App.css\";\n\nimport ReactNode from \"./components/ReactNode\";\nimport { Provider } from \"./contexts/ReactDims\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n    const [data, setData] = useState([]);\n    const generateData = ()=>{\n        let arr = [];\n        for(let i =0; i < 10; i++){\n            arr.push(Math.round(Math.random()*10));\n        };\n        setData(arr);\n    };\n    useEffect(()=>generateData(),[])\n\n    return (\n    <div className=\"myLayout\">\n      <div className=\"coolThing\">\n          <button onClick={generateData}>update data</button>\n\n        <Provider>\n          <ReactNode data={data} />\n        </Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}